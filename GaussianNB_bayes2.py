import glob
import re
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn import metrics
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.naive_bayes import MultinomialNB,GaussianNB,BernoulliNB
from sklearn.metrics import classification_report



#加载文件路径
def load_files_from_dir(dir):
    files = glob.glob(dir)
    result = []
    for file in files:
       print(" %s\n" % file)
       with open(file) as f:
           lines = f.readline()
           lines_to_line = " ".join(lines)
           lines_to_line = re.sub(r"[APT|Crypto|Locker|Zeus]",' ',lines_to_line,flags = re.I)
           result.append(lines_to_line)
    return result

#加载文件
def load_files():
    malware_class = ['APT','Crypto','Locker','Zeus']
    x = []
    y = []
    for i,family in enumerate(malware_class):
       dir = r'F:\ProgramAnalysis\MalwareTrainingSets_master\trainingSets\%s\*'%family
       print("Load files from %s" % dir)
       v = load_files_from_dir(dir)
       x+=v
       y+=[i]*len(v)
    return x,y

if __name__ == '__main__':
    x,y = load_files()
    vectorizer = CountVectorizer(  #只考虑词汇在文本中出现的频率
        decode_error = 'ignore',
        ngram_range = (2,2),
        strip_accents = 'ascii',
        max_features = 1000,
        stop_words ='english',
        max_df = 1.0,
        min_df = 1,
        token_pattern = r'\b\w+\b',
        binary =False
    )
    x = vectorizer.fit_transform(x).toarray()
    transformer = TfidfTransformer(smooth_idf = False)#除了考量某词汇在文本出现的频率，还关注包含这个词汇的所有文本的数量
    x = transformer.fit_transform(x)
    x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.4,random_state=0)#划分
    clf = BernoulliNB().fit(x_train,y_train)
    BernoulliNB(alpha=1.0, binarize=0.0, class_prior=None, fit_prior=True)
    pred = clf.predict(x_test)
    train_score = clf.score(x_train,y_train)
    print("train score: {0}".format(train_score))
    print("vectorizing test dataset ...")
    pred = clf.predict(x_test[0])
    print("predicting test dataset ...")
    pred = clf.predict(x_test)
    # 总结朴素贝叶斯模型在测试集上的性能
    print(clf)
    print(classification_report(y_test, pred,y_test))
    print(metrics.accuracy_score(y_test,pred))
